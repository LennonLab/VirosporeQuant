# Convert the final result back to POSIXct or Date, if needed
OD600$Time <- as.POSIXct(OD600$time, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# Correcting the dates associated with the experiment
# Ensure the time column is in character format
OD600$Time <- as.character(OD600$Time)
# Split the date and time
date_part <- substr(OD600$Time, 1, 10)  # Extract the date part
time_part <- substr(OD600$Time, 12, 19)  # Extract the time part
# Replace the incorrect date with the correct one, while keeping the original time
date_part[date_part == "1899-12-31"] <- "2025-01-09"
# Recombine the corrected date with the original time
OD600$Time <- paste(date_part, time_part)
View(OD600)
library(readxl)
OD600 <- read_excel("~/Desktop/20250113_spo0A_gfp_BBphage_commlysate_34C_48H.xlsx", sheet = "OD600")
gfp <- read_excel("~/Desktop/20250113_spo0A_gfp_BBphage_commlysate_34C_48H.xlsx", sheet = "GFP_1")
#gfp_normal <- read_excel("~/Desktop/20240919_GFP_ON_results_analysis.xlsx", sheet = "GFP_normalized")
str(OD600)
str(gfp)
# Delete columns with no data
gfp_clean <- subset(gfp, select = -c(A2, A3, A5, A6, A8, A9, A11, A12, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, D2, D3, D5, D6, D8, D9, D11, D12, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, G2, G3, G5, G6, G8, G9, G11, G12, H1, H2, H3, H4, H5, H6, H7, H8, H9, H10, H11, H12))
OD600_clean <- subset(OD600, select = -c(A2, A3, A5, A6, A8, A9, A11, A12, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, D2, D3, D5, D6, D8, D9, D11, D12, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, G2, G3, G5, G6, G8, G9, G11, G12, H1, H2, H3, H4, H5, H6, H7, H8, H9, H10, H11, H12))
# Subtracting LB blank from all cells
columns_to_adjust <- c("A1","A4","A7","A10","D1","D4","D7","D10","G1","G4", "G7", "G10")
# Subtract the values in A1 from the specified columns
gfp_adjusted <- gfp_clean
gfp_adjusted[columns_to_adjust] <- sweep(gfp_clean[columns_to_adjust], 1, gfp_clean$A1, "-")
# Print the adjusted data frame
print(gfp_adjusted)
str(gfp_clean)
str(OD600_clean)
# Define the columns you want to normalize (replace with actual column indices or names)
columns_to_normalize <- 3:14  # Replace with the indices or names of specific columns
# Convert the specific columns to numeric if they aren't already
gfp_adjusted[, columns_to_normalize] <- lapply(gfp_adjusted[, columns_to_normalize], as.numeric)
OD600_clean[, columns_to_normalize] <- lapply(OD600_clean[, columns_to_normalize], as.numeric)
# Perform element-wise division
gfp_normalized <- gfp_adjusted
for (col in columns_to_normalize) {
gfp_normalized[, col] <- gfp_adjusted[, col] / OD600_clean[, col]
}
# View the result
head(gfp_normalized)
# Rename columns with sample names (OD_clean)
colnames(OD600_clean)[colnames(OD600_clean) == "A1"] <- "LB_blank"
colnames(OD600_clean)[colnames(OD600_clean) == "A4"] <- "GFP_control_R1"
colnames(OD600_clean)[colnames(OD600_clean) == "A7"] <- "GFP_control_R2"
colnames(OD600_clean)[colnames(OD600_clean) == "A10"] <- "GFP_control_R3"
colnames(OD600_clean)[colnames(OD600_clean) == "D1"] <- "GFP_BBphage_R1"
colnames(OD600_clean)[colnames(OD600_clean) == "D4"] <- "GFP_BBphage_R2"
colnames(OD600_clean)[colnames(OD600_clean) == "D7"] <- "GFP_BBphage_R3"
colnames(OD600_clean)[colnames(OD600_clean) == "D10"] <- "GFP_CommLysate_R1"
colnames(OD600_clean)[colnames(OD600_clean) == "G1"] <- "GFP_CommLysate_R2"
colnames(OD600_clean)[colnames(OD600_clean) == "G4"] <- "GFP_CommLysate_R3"
colnames(OD600_clean)[colnames(OD600_clean) == "G7"] <- "GFP_BBveg_R1"
colnames(OD600_clean)[colnames(OD600_clean) == "G10"] <- "GFP_BBveg_R2"
# Print the updated column names
print(colnames(OD600_clean))
# Rename columns with sample names (gfp_adjusted)
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "A1"] <- "LB_blank"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "A4"] <- "GFP_control_R1"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "A7"] <- "GFP_control_R2"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "A10"] <- "GFP_control_R3"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "D1"] <- "GFP_BBphage_R1"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "D4"] <- "GFP_BBphage_R2"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "D7"] <- "GFP_BBphage_R3"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "D10"] <- "GFP_CommLysate_R1"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "G1"] <- "GFP_CommLysate_R2"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "G4"] <- "GFP_CommLysate_R3"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "G7"] <- "GFP_BBveg_R1"
colnames(gfp_adjusted)[colnames(gfp_adjusted) == "G10"] <- "GFP_BBveg_R2"
print(colnames(gfp_adjusted))
# Rename columns with sample names (gfp_normalized)
colnames(gfp_normalized)[colnames(gfp_normalized) == "A1"] <- "LB_blank"
colnames(gfp_normalized)[colnames(gfp_normalized) == "A4"] <- "GFP_control_R1"
colnames(gfp_normalized)[colnames(gfp_normalized) == "A7"] <- "GFP_control_R2"
colnames(gfp_normalized)[colnames(gfp_normalized) == "A10"] <- "GFP_control_R3"
colnames(gfp_normalized)[colnames(gfp_normalized) == "D1"] <- "GFP_BBphage_R1"
colnames(gfp_normalized)[colnames(gfp_normalized) == "D4"] <- "GFP_BBphage_R2"
colnames(gfp_normalized)[colnames(gfp_normalized) == "D7"] <- "GFP_BBphage_R3"
colnames(gfp_normalized)[colnames(gfp_normalized) == "D10"] <- "GFP_CommLysate_R1"
colnames(gfp_normalized)[colnames(gfp_normalized) == "G1"] <- "GFP_CommLysate_R2"
colnames(gfp_normalized)[colnames(gfp_normalized) == "G4"] <- "GFP_CommLysate_R3"
colnames(gfp_normalized)[colnames(gfp_normalized) == "G7"] <- "GFP_BBveg_R1"
colnames(gfp_normalized)[colnames(gfp_normalized) == "G10"] <- "GFP_BBveg_R2"
print(colnames(gfp_normalized))
library(tidyr)
library(dplyr)
# Reshape the data from wide to long format
df_long <- pivot_longer(gfp_normalized,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "RFU")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
df_long_filtered <- df_long %>%
filter(Sample != "Temp.")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(df_long_filtered))
library(ggplot2)
# Create the plot
ggplot(df_long_filtered, aes(x = Time, y = RFU, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "GFP expression of Spo0A +/- phage particles (normalized to OD)",
x = "Time (hours)",
y = "RFU") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(df_long, aes(x = Time, y = RFU)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal()
library(tidyr)
library(dplyr)
# Reshape the data from wide to long format
df_long <- pivot_longer(gfp_normalized,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "RFU")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
df_long_filtered <- df_long %>%
filter(Sample != "Temp.")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(df_long_filtered))
library(ggplot2)
# Create the plot
ggplot(df_long_filtered, aes(x = Time, y = RFU, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "GFP expression of Spo0A +/- treatment (normalized to OD)",
x = "Time (hours)",
y = "RFU") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(df_long, aes(x = Time, y = RFU)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal()
# Plotting OD600 over time
# Reshape the data from wide to long format
OD_long <- pivot_longer(OD600_clean,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "OD600")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
OD_long_filtered <- OD_long %>%
filter(Sample != "Temp")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(OD_long_filtered))
library(ggplot2)
# Create the plot
ggplot(OD_long_filtered, aes(x = Time, y = OD600, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "Growth curves",
x = "Time (hours)",
y = "OD 600") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(OD_long, aes(x = Time, y = OD600)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal() +
scale_y_continuous(limits=c(0, 1.5))
# Working with pre-normalized data
library(tidyr)
library(dplyr)
# Reshape the data from wide to long format
df_long <- pivot_longer(gfp_adjusted,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "Fluorescence")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
df_long_filtered <- df_long %>%
filter(Sample != "Temp.")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(df_long_filtered))
library(ggplot2)
# Create the plot
ggplot(df_long_filtered, aes(x = Time, y = Fluorescence, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "GFP expression of Spo0A (adjusted for background fluorescence)",
x = "Time (hours)",
y = "RFU") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(df_long, aes(x = Time, y = Fluorescence)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal()
#Plotting raw GFP fluorescence, no normalizaton
# Working with pre-normalized data
library(tidyr)
library(dplyr)
# Rename the columns of data
colnames(gfp_clean)[colnames(gfp_clean) == "A1"] <- "LB_blank"
colnames(gfp_clean)[colnames(gfp_clean) == "A4"] <- "GFP_control_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "A7"] <- "GFP_control_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "A10"] <- "GFP_control_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D1"] <- "GFP_BBphage_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "D4"] <- "GFP_BBphage_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "D7"] <- "GFP_BBphage_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D10"] <- "GFP_HTphage_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "G1"] <- "GFP_HTphage_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "G4"] <- "GFP_HTphage_R3"
# Reshape the data from wide to long format
df_long <- pivot_longer(gfp_clean,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "Fluorescence")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
df_long_filtered <- df_long %>%
filter(Sample != "Temp")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(df_long_filtered))
library(ggplot2)
# Create the plot
ggplot(df_long_filtered, aes(x = Time, y = Fluorescence, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "GFP expression of Spo0A (raw data)",
x = "Time (hours)",
y = "RFU") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(df_long, aes(x = Time, y = Fluorescence)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal()
#Plotting raw GFP fluorescence, no normalizaton
# Working with pre-normalized data
library(tidyr)
library(dplyr)
# Rename the columns of data
colnames(gfp_clean)[colnames(gfp_clean) == "A1"] <- "LB_blank"
colnames(gfp_clean)[colnames(gfp_clean) == "A4"] <- "GFP_control_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "A7"] <- "GFP_control_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "A10"] <- "GFP_control_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D1"] <- "GFP_BBphage_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "D4"] <- "GFP_BBphage_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "D7"] <- "GFP_BBphage_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D10"] <- "GFP_CommLysate_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "G1"] <- "GFP_CommLysate_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "G4"] <- "GFP_CommLysate_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "G7"] <- "GFP_BBveg_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "G10"] <- "GFP_BBveg_R2"
# Reshape the data from wide to long format
df_long <- pivot_longer(gfp_clean,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "Fluorescence")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
df_long_filtered <- df_long %>%
filter(Sample != "Temp")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(df_long_filtered))
library(ggplot2)
# Create the plot
ggplot(df_long_filtered, aes(x = Time, y = Fluorescence, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "GFP expression of Spo0A (raw data)",
x = "Time (hours)",
y = "RFU") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(df_long, aes(x = Time, y = Fluorescence)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal()
#Plotting raw GFP fluorescence, no normalizaton
# Working with pre-normalized data
library(tidyr)
library(dplyr)
# Rename the columns of data
colnames(gfp_clean)[colnames(gfp_clean) == "A1"] <- "LB_blank"
colnames(gfp_clean)[colnames(gfp_clean) == "A4"] <- "GFP_control_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "A7"] <- "GFP_control_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "A10"] <- "GFP_control_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D1"] <- "GFP_BBphage_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "D4"] <- "GFP_BBphage_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "D7"] <- "GFP_BBphage_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D10"] <- "GFP_CommLysate_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "G1"] <- "GFP_CommLysate_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "G4"] <- "GFP_CommLysate_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "G7"] <- "GFP_BBveg_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "G10"] <- "GFP_BBveg_R2"
# Reshape the data from wide to long format
df_long <- pivot_longer(gfp_clean,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "Fluorescence")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
df_long_filtered <- df_long %>%
filter(Sample != "Temp")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(df_long_filtered))
library(ggplot2)
# Create the plot
ggplot(df_long_filtered, aes(x = Time, y = Fluorescence, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "GFP expression of Spo0A (raw data)",
x = "Time (hours)",
y = "RFU") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(df_long, aes(x = Time, y = Fluorescence)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal()
View(df_long_filtered)
#Plotting raw GFP fluorescence, no normalizaton
# Working with pre-normalized data
library(tidyr)
library(dplyr)
# Rename the columns of data
colnames(gfp_clean)[colnames(gfp_clean) == "A1"] <- "LB_blank"
colnames(gfp_clean)[colnames(gfp_clean) == "A4"] <- "GFP_control_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "A7"] <- "GFP_control_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "A10"] <- "GFP_control_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D1"] <- "GFP_BBphage_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "D4"] <- "GFP_BBphage_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "D7"] <- "GFP_BBphage_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "D10"] <- "GFP_CommLysate_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "G1"] <- "GFP_CommLysate_R2"
colnames(gfp_clean)[colnames(gfp_clean) == "G4"] <- "GFP_CommLysate_R3"
colnames(gfp_clean)[colnames(gfp_clean) == "G7"] <- "GFP_BBveg_R1"
colnames(gfp_clean)[colnames(gfp_clean) == "G10"] <- "GFP_BBveg_R2"
# Reshape the data from wide to long format
df_long <- pivot_longer(gfp_clean,
cols = -Time,  # Keep the "Time" column as is
names_to = "Sample",  # Name for the new column with sample names
values_to = "Fluorescence")  # Name for the fluorescence readings
# Remove the specified sample from the long-format dataframe
df_long_filtered <- df_long %>%
filter(Sample != "Temp")  # Replace "Sample2" with the name of the sample you want to remove
# Check the filtered data
print(head(df_long_filtered))
library(ggplot2)
# Create the plot
ggplot(df_long_filtered, aes(x = Time, y = Fluorescence, color = Sample)) +
geom_smooth() + # Line plot for each sample # Optional: Points for each time point
labs(title = "GFP expression of Spo0A (raw data)",
x = "Time (hours)",
y = "RFU") +
theme_minimal() +  # Clean and minimal theme
theme(legend.title = element_blank())  # Remove legend title
ggplot(df_long, aes(x = Time, y = Fluorescence)) +
geom_line() +
facet_wrap(~ Sample) +
theme_minimal()
View(df_long_filtered)
newASVtab_Joy <- readRDS("~/Desktop/newASVtab_Joy.rds")
View(newASVtab_Joy)
seqtab_final <- readRDS("~/Desktop/seqtab_final.rds")
View(seqtab_final)
# Set wd
setwd(~/GitHub/VirosporeQuant)
setwd("~/GitHub/VirosporeQuant")
# Set wd
setwd("~/GitHub/VirosporeQuant")
# Load data
virospore_MOI <- read.csv("~/GitHub/VirosporeQuant/Data/ddPCR_Quant/20250306_SPO1_Delta6_MOI_ddPCR.csv")
View(virospore_MOI)
View(virospore_MOI)
View(virospore_MOI)
library(ggplot2)
ggplot(ddPCR_data, aes(x = factor(MOI), y = SPO1_Copies_copies_ul) +
geom_boxplot() +
geom_jitter(alpha = 0.5, width = 0.2) +
theme_minimal() +
labs(y = "SPO1 Copy Number (copies/µL)", x = "MOI")
library(ggplot2)
ggplot(viospore_MOI, aes(x = factor(MOI), y = SPO1_Copies_copies_ul) +
geom_boxplot() +
geom_jitter(alpha = 0.5, width = 0.2) +
theme_minimal() +
labs(y = "SPO1 Copy Number (copies/µL)", x = "MOI")
library(ggplot2)
ggplot(viospore_MOI, aes(x = factor(MOI), y = SPO1_Copies_copies_ul)) +
geom_boxplot() +
geom_jitter(alpha = 0.5, width = 0.2) +
theme_minimal() +
labs(y = "SPO1 Copy Number (copies/µL)", x = "MOI")
library(ggplot2)
ggplot(virospore_MOI, aes(x = factor(MOI), y = SPO1_Copies_copies_ul)) +
geom_boxplot() +
geom_jitter(alpha = 0.5, width = 0.2) +
theme_minimal() +
labs(y = "SPO1 Copy Number (copies/µL)", x = "MOI")
library(ggplot2)
ggplot(virospore_MOI, aes(x = factor(MOI), y = SPO1_Copy_copies_ul)) +
geom_boxplot() +
geom_jitter(alpha = 0.5, width = 0.2) +
theme_minimal() +
labs(y = "SPO1 Copy Number (copies/µL)", x = "MOI")
# Calculate entrapment efficiency for each replicate sample
virospore_MOI$EntrapmentEfficiency <- (virospore_MOI$SPO1_Copy_copies_ul / virospore_MOI$Bacillus_Copy) * 100
View(virospore_MOI)
# Calculate entrapment efficiency for each replicate sample
virospore_MOI$Entrapment_Efficiency <- (virospore_MOI$SPO1_Copy_copies_ul / virospore_MOI$Bacillus_Copy) * 100
View(virospore_MOI)
# Stats comparing entrapment efficieny at different MOI
# Check normality
shapiro.test(virospore_MOI$Entrapment_Efficiency)
# Perform ANOVA if normal
# anova_result <- aov(EntrapmentEfficiency ~ factor(MOI), data = ddPCR_data)
# summary(anova_result)
#
# # Perform Kruskal-Wallis if non-normal
# kruskal.test(EntrapmentEfficiency ~ factor(MOI), data = ddPCR_data)
# Stats comparing entrapment efficieny at different MOI
# Check normality
shapiro.test(virospore_MOI$Entrapment_Efficiency) # based on this the data is not normally distributed
# Perform Kruskal-Wallis because the data is not normally distributed
kruskal.test(Entrapment_Efficiency ~ factor(MOI), data = virospore_MOI)
# Stats comparing entrapment efficieny at different MOI
# Check normality
shapiro.test(virospore_MOI$Entrapment_Efficiency) # based on this the data is not normally distributed
# Perform Kruskal-Wallis because the data is not normally distributed
kruskal.test(Entrapment_Efficiency ~ factor(MOI), data = virospore_MOI)
# Post-hoc for Kruskal
dunn.test(virospore_MOI$Entrapment_Efficiency, virospore_MOI$MOI, method = "bonferroni")
# Load libraries
library(dunn.test)
# Stats comparing entrapment efficieny at different MOI
# Check normality
shapiro.test(virospore_MOI$Entrapment_Efficiency) # based on this the data is not normally distributed
# Perform Kruskal-Wallis because the data is not normally distributed
kruskal.test(Entrapment_Efficiency ~ factor(MOI), data = virospore_MOI)
# Post-hoc for Kruskal
dunn.test(virospore_MOI$Entrapment_Efficiency, virospore_MOI$MOI, method = "bonferroni")
# testing for correlation?
cor.test(virospore_MOI$MOI, virospore_MOI$Entrapment_Efficiency, method = "spearman")  # Use Spearman for non-linear relationships
ggplot(virospore_MOI, aes(x = factor(MOI), y = Entrapment_Efficiency, fill = factor(MOI))) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Show individual replicates
theme_minimal() +
labs(y = "Entrapment Efficiency (%)", x = "MOI") +
theme(legend.position = "none")
# Visualize entrapment efficiency via box plot
ggplot(virospore_MOI, aes(x = factor(MOI), y = Entrapment_Efficiency, fill = factor(MOI))) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Show individual replicates
theme_minimal() +
scale_y_log10() + # Log transform y axis
labs(y = "Entrapment Efficiency (%)", x = "MOI") +
theme(legend.position = "none")
# Visualize entrapment efficiency via box plot
ggplot(virospore_MOI, aes(x = factor(MOI), y = Entrapment_Efficiency, fill = factor(MOI))) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Show individual replicates
theme_minimal() +
scale_y_log() + # Log transform y axis
labs(y = "Entrapment Efficiency (%)", x = "MOI") +
theme(legend.position = "none")
# Visualize entrapment efficiency via box plot
ggplot(virospore_MOI, aes(x = factor(MOI), y = Entrapment_Efficiency, fill = factor(MOI))) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Show individual replicates
theme_minimal() +
scale_y_log10() + # Log transform y axis
labs(y = "Entrapment Efficiency (%)", x = "MOI") +
theme(legend.position = "none")
# Bar plot
library(ggplot2)
library(dplyr)
# Calculate mean and standard error for each MOI
summary_stats <- virospore_MOI %>%
group_by(MOI) %>%
summarise(
mean = mean(Entrapment_Efficiency),
se = sd(Entrapment_Efficiency) / sqrt(n())  # Standard Error
)
# Bar plot
ggplot(summary_stats, aes(x = factor(MOI), y = mean)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black", width = 0.6) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
theme_minimal() +
labs(y = "Mean Entrapment Efficiency", x = "MOI") +
theme(text = element_text(size = 14))
# Bar plot
library(ggplot2)
library(dplyr)
# Calculate mean and standard error for each MOI
summary_stats <- virospore_MOI %>%
group_by(MOI) %>%
summarise(
mean = mean(Entrapment_Efficiency),
se = sd(Entrapment_Efficiency) / sqrt(n())  # Standard Error
)
# Bar plot
ggplot(summary_stats, aes(x = factor(MOI), y = mean)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black", width = 0.6) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
scale_y_log10() +
theme_minimal() +
labs(y = "Mean Entrapment Efficiency", x = "MOI") +
theme(text = element_text(size = 14))
# Bar plot
library(ggplot2)
library(dplyr)
# Calculate mean and standard error for each MOI
summary_stats <- virospore_MOI %>%
group_by(MOI) %>%
summarise(
mean = mean(Entrapment_Efficiency),
se = sd(Entrapment_Efficiency) / sqrt(n())  # Standard Error
)
# Bar plot
ggplot(summary_stats, aes(x = factor(MOI), y = mean)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black", width = 0.6) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
scale_y_log10() +
theme_minimal() +
labs(y = "Mean Entrapment Efficiency (%)", x = "MOI") +
theme(text = element_text(size = 14))
